package com.example.anna.neptis.activities;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.Volley;
import com.example.anna.neptis.R;
import com.example.anna.neptis.defines.GameManager;
import com.example.anna.neptis.defines.ObjCard;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.LinkedList;
import java.util.List;

/**
 * Created by Anna on 29/10/2016.
 */

public class TreasureInfoActivity extends AppCompatActivity {

    private static final String TAG = "TreasureInfoAct";

    String treasure_code;
    List treas_card_list;
    String url, url2, url3, url4;
    String t_lat, t_lon, t_info;
    TextView info;
    TextView latitude, longitude;
    String c_name, c_cost, c_description, c_code;
    ListView carte_tesori;

    ImageButton okButton;

    String game1SessionCode;
    String heritage;

    // TODO cards have to be generated by the server...
    String[] random_card_code = new String[5];

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.card_in_treasure);

        game1SessionCode = GameManager.getInstance().getGame1SessionCode();
        heritage = getIntent().getExtras().getString("heritageName");
        treasure_code = getIntent().getExtras().getString("codice_tesoro");
        t_info = getIntent().getExtras().getString("info");
        t_lat = getIntent().getExtras().getString("latitude");
        t_lon = getIntent().getExtras().getString("longitude");

        info = (TextView) findViewById(R.id.t_info);
        latitude = (TextView) findViewById(R.id.t_lat_val);
        longitude = (TextView) findViewById(R.id.t_lon_val);
        okButton = (ImageButton) findViewById(R.id.ok);

        info.setText(t_info);
        latitude.setText(t_lat);
        longitude.setText(t_lon);

        generaCarte();

        treas_card_list = new LinkedList<ObjCard>();

        for (int i = 0; i < random_card_code.length; i++) {
            RequestQueue queue2 = Volley.newRequestQueue(this);
            url2 = getString(R.string.server_url) + "getTreasureCardInfo/" + random_card_code[i] + "/";

            JsonArrayRequest jsInfoCardTreasure = new JsonArrayRequest(Request.Method.GET, url2, null, new Response.Listener<JSONArray>() {
                @Override
                public void onResponse(JSONArray response) {
                    try {
                        int contLength = response.length();
                        for (int i = 0; i < contLength; i++) {
                            JSONObject jsObj = (JSONObject) response.get(i);
                            c_code = jsObj.getString("code");
                            c_name = jsObj.getString("name");
                            c_cost = jsObj.getString("cost");
                            c_description = jsObj.getString("description");
                            treas_card_list.add(new ObjCard(c_code, c_cost, c_name, c_description));
                            // TODO change adapter
                            //CardAdapter adapter = new CardAdapter(TreasureInfoActivity.this, R.layout.adapter_card, treas_card_list);
                            //carte_tesori.setAdapter(adapter);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.d(TAG, error.toString());
                }
            });

            queue2.add(jsInfoCardTreasure);
        }

        addCardToTreasure(random_card_code, treasure_code);
        addCardToCollection(random_card_code, game1SessionCode); //aggiungere game1SessionCode prendendolo dall'activity padre

        //quando l'utente fa la back da questa pagina, aspetto qualche secondo prima di passare nell'activity principale
        // TODO handle back button
        Handler mHandler = new Handler();
        mHandler.postDelayed(new Runnable() {

            @Override
            public void run() {
                okButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent returnToPag2 = new Intent(TreasureInfoActivity.this, TreasurePortalPag2.class);
                        returnToPag2.putExtra("heritageName", heritage);
                        returnToPag2.putExtra("game1SessionCode", game1SessionCode);
                        startActivity(returnToPag2);
                    }
                });
            }

        }, 1500L);
    }

    //funzione random che permette di generare 5 carte da inserire nel tesoro trovato dall'utente
    public void generaCarte() {
        for (int i = 0; i < 5; i++) {
            int j = 1;
            int n = 20 - j;
            int RESULT = (int) (Math.random() * n + j);

            String card_code = "card00";
            if (RESULT < 10) {
                card_code = card_code + "0" + RESULT;
            } else {
                card_code = card_code + RESULT;
            }
            random_card_code[i] = card_code;
        }
    }

    //metodo che aggiunge le carte generate nella relazione TC, associandole al tesoro passato come parametro
    public void addCardToTreasure(String[] card_code, String treas_code) {
        for (int i = 0; i < card_code.length; i++) {
            RequestQueue queue3 = Volley.newRequestQueue(this);
            url3 = getString(R.string.server_url) + "addCardToTreasure/" + treas_code + "/" + card_code[i] + "/";//modificare con getCardInfo

            JsonArrayRequest jsAddCard = new JsonArrayRequest(Request.Method.GET, url3, null, new Response.Listener<JSONArray>() {
                @Override
                public void onResponse(JSONArray response) {
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.d(TAG, error.toString());
                }
            });

            queue3.add(jsAddCard);
        }
    }

    //metodo che aggiunge le carte generate nella relazione G1C, associandole al game1SessionCode passato come parametro
    public void addCardToCollection(String[] card_code, String game) {
        for (int i = 0; i < card_code.length; i++) {
            RequestQueue queue3 = Volley.newRequestQueue(this);
            url4 = getString(R.string.server_url) + "addCardToUserCollection/" + game + "/" + card_code[i] + "/";//modificare con getCardInfo

            JsonArrayRequest jsAddCardToCollection = new JsonArrayRequest(Request.Method.GET, url4, null, new Response.Listener<JSONArray>() {
                @Override
                public void onResponse(JSONArray response) {
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    Log.d(TAG, error.toString());
                }
            });

            queue3.add(jsAddCardToCollection);
        }
    }

}